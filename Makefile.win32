###
# Makefile for cross compiling jSH for Win32
###

# subdirs
THIRDPARTY	= 3rdparty/
PLUGINS = plugins
MUJS		= $(THIRDPARTY)/mujs-1.0.5
KUBAZIP		= $(THIRDPARTY)/zip-0.2.3
ZLIB		= $(THIRDPARTY)/zlib-1.3.1
INI			= $(THIRDPARTY)/ini-20220806/src
CURL		= $(THIRDPARTY)/curl-8.11.0
MBEDTLS		= $(THIRDPARTY)/mbedtls-3.6.2

NOTCP = 1 # Not set up at all

JSDOC_TEMPLATES ?= $(shell npm root)/better-docs $(shell npm root -g)/better-docs

LIB_MUJS	= $(MUJS)/build/release/libmujs.a
LIB_Z		= $(ZLIB)/libz.a
LIB_MBEDTLS = $(MBEDTLS)/library/libmbedtls.a
LIB_CURL	= $(CURL)/libcurl.a

# compiler
SQLITE_CFLAGS	= \
	-DSQLITE_THREADSAFE=0 \
	-DSQLITE_DEFAULT_MEMSTATUS=0 \
	-DSQLITE_MAX_MMAP_SIZE=0 \
	-DSQLITE_OMIT_WAL=1 \
	-DSQLITE_OMIT_LOAD_EXTENSION=1 \
	-DSQLITE_ENABLE_8_3_NAMES=2 \
	-DSQLITE_ENABLE_LOCKING_STYLE=0

CDEF     = -DLINUX=1 -DWINDOWS=1 -D__LINUX__ -DCURL_STATICLIB -DHTTP_ONLY -D_WIN32_WINNT=0x400 $(SQLITE_CFLAGS) -DGC_BEFORE_MALLOC
ifdef NOTCP
	CDEF += -DNOTCP
endif
CFLAGS   = -MMD -Wall -Wno-format -std=gnu99 -O2 -fomit-frame-pointer $(INCLUDES) -fgnu89-inline -Wmissing-prototypes $(CDEF)
INCLUDES	= \
	-I$(realpath $(MUJS)) \
	-I$(realpath $(KUBAZIP))/src \
	-I$(realpath $(KUBAZIP))/src/linux \
	-I$(realpath $(ZLIB)) \
	-I$(realpath $(INI))/

ifndef NOTCP
	INCLUDES += \
		-I$(realpath $(MBEDTLS))/include \
		-I$(realpath $(MBEDTLS))/library \
		-I$(realpath $(CURL))/include
endif

INCLUDES += -I$(realpath ./src/) \
	-I$(realpath ./src/linux)

# linker
LIBS    = -lmujs -lm -lkernel32 -luser32 -Wl,-Bdynamic -lwinmm
ifndef NOTCP
	LIBS += -lcurl -lws2_32 -lmbedtls -lmbedx509 -lmbedcrypto
endif

LDFLAGS  = -s \
	-L$(MUJS)/build/release \
	-L$(ZLIB)
ifndef NOTCP
	LDFLAGS		+= -L$(CURL)/lib \
		-L$(MBEDTLS)/library
endif

# output
EXE				= JSH-W32.EXE
RELZIP			= Win32_jsh.zip

# dirs/files
JSHPATH			= $(realpath .)
BUILDDIR		= build
DOCDIR			= doc/html

## compiler and binutils
CROSS=i486-w64-mingw32
CROSS_PLATFORM=$(CROSS)-
CC=$(CROSS_PLATFORM)gcc
CXX=$(CROSS_PLATFORM)g++
AR=$(CROSS_PLATFORM)ar
LD=$(CROSS_PLATFORM)gcc
STRIP=$(CROSS_PLATFORM)strip
RANLIB=$(CROSS_PLATFORM)ranlib
RC=$(CROSS_PLATFORM)windres
DXINC=$(MINGWDIR)/$(CROSS)/include
DXLIB=$(MINGWDIR)/$(CROSS)/lib
export

## other tools used in Makefile
AWKPRG		= awk
CATPRG		= cat
CPPRG		= cp
CUTPRG		= cut
CURLPRG		= curl
ECHOPRG		= echo
EGREPPRG	= egrep
FINDPRG		= find
GREPPRG		= grep
JSDOCPRG	= jsdoc
MKDIRPRG	= mkdir
PYTHONPRG	= python3
RMPRG		= rm
SEDPRG		= sed
SHPRG		= bash
SORTPRG		= sort
UNIQPRG		= uniq
ZIPPRG		= zip
FONTCONV	= GrxFntConv
NPM_INSTALL = npm install -g

PARTS= \
	$(BUILDDIR)/zip/src/zip.o \
	$(BUILDDIR)/file.o \
	$(BUILDDIR)/funcs.o \
	$(BUILDDIR)/jsconio.o \
	$(BUILDDIR)/zipfile.o \
	$(BUILDDIR)/socket.o \
	$(BUILDDIR)/jSH.o \
	$(BUILDDIR)/intarray.o \
	$(BUILDDIR)/bytearray.o \
	$(BUILDDIR)/util.o \
	$(BUILDDIR)/inifile.o \
	$(BUILDDIR)/ini/ini.o
ifndef NOTCP
	PARTS += $(BUILDDIR)/curl.o
endif

TCP_TARGETS := libcurl
TCP_CLEAN_TARGETS := mbedtlsclean curlclean

ifdef NOTCP
	TCP_TARGETS :=
	TCP_CLEAN_TARGETS :=
endif

all: $(EXE) JSBOOT.ZIP

prereqs: Makefile init libmujs $(TCP_TARGETS)

libmujs: $(LIB_MUJS)
$(LIB_MUJS):
	$(MAKE) $(MPARA) -C $(MUJS) build/release/libmujs.a WINDOWS=1

libcurl: $(LIB_CURL)
$(LIB_CURL): libmbedtls libz
	$(MAKE) $(MPARA) -C $(CURL)/lib -f Makefile.mk CFG=-zlib-mbedtls TRIPLET=$(CROSS)

libmbedtls: $(LIB_MBEDTLS)
$(LIB_MBEDTLS):
	$(MAKE) $(MPARA) -C $(MBEDTLS) -f Makefile lib

libz: $(LIB_Z)
$(LIB_Z):
	$(MAKE) $(MPARA) -C $(ZLIB) -f Makefile.dojs
	# $(CPPRG) $(ZLIB)/zlib1.dll .

$(EXE): prereqs $(PARTS)
	$(CC) $(LDFLAGS) -o $@ $(PARTS) $(LIBS)
	# $(STRIP) $@

$(BUILDDIR)/%.o: src/%.c
	$(CC) $(CFLAGS) -c $< -o $@

# $(BUILDDIR)/%.o: plugins/sqlite.dxelib/%.c prereqs
# 	$(CC) $(CFLAGS) -c $< -o $@

# $(BUILDDIR)/%.o: plugins/curl.dxelib/%.c prereqs
# 	$(CC) $(CFLAGS) -c $< -o $@

# $(BUILDDIR)/%.o: plugins/neural.dxelib/%.c prereqs
# 	$(CC) $(CFLAGS) -c $< -o $@

# $(BUILDDIR)/%.o: plugins/genpdf.dxelib/%.c prereqs
# 	$(CC) $(CFLAGS) -c $< -o $@

$(BUILDDIR)/zip/src/%.o: $(KUBAZIP)/src/%.c prereqs
	$(CC) $(CFLAGS) -c $< -o $@

$(BUILDDIR)/ini/%.o: $(INI)/%.c prereqs
	$(CC) $(CFLAGS) -c $< -o $@



$(DXE_DIRS):
	$(MAKE) -C $@

$(DXE_EXPORTS): extract_functions.py dxetemplate.txt $(MUJS)/mujs.h
	$(PYTHONPRG) ./extract_functions.py $(DXE_TEMPLATE) $(MUJS)/mujs.h $@

JSBOOT.ZIP: $(shell find jsboot/ -type f)
	$(RMPRG) -f $@
	$(ZIPPRG) -9 -r $@ jsboot/

zip: all doc
	$(RMPRG) -f $(RELZIP)
	$(CURLPRG) -o CACERT.PEM https://curl.se/ca/cacert.pem
	$(ZIPPRG) -9 -v -r $(RELZIP) $(EXE) JC.JS JC.BAT CWSDPMI.EXE LICENSE README.md CHANGELOG.md JSBOOT.ZIP JPM.BAT CACERT.PEM scripts/ $(DOCDIR) *.dxe

doc:
	$(RMPRG) -rf $(DOCDIR)
	$(MKDIRPRG) -p $(DOCDIR)
	# if this fails add JSDOC_TEMPLATES='<location(s) to look for templates>' to your make invocation
	for i in $(JSDOC_TEMPLATES); do [ -d $$i ] && cd doc && $(JSDOCPRG) --verbose -t $$i -c jsdoc.conf.json -d ../$(DOCDIR) && break; done

init:
	$(MKDIRPRG) -p $(BUILDDIR) $(BUILDDIR)/zip/src $(BUILDDIR)/ini $(BUILDDIR)/linux $(BUILDDIR)/PDFGen-master/
	# make sure compile time is always updated
	#$(RMPRG) -f $(BUILDDIR)/jSH.o

distclean: clean jsclean dxeclean muclean zclean $(TCP_CLEAN_TARGETS)
	$(RMPRG) -rf $(DOCDIR) TEST.TXT JSLOG.TXT *.dxe
	rm -f *.dll

jsclean:
	$(MAKE) -C $(MUJS) clean

zclean:
	$(MAKE) -C $(ZLIB) -f Makefile.dojs clean

dxeclean:
	$(RMPRG) -f $(DXE_EXPORTS)

muclean:
	$(RMPRG) -rf $(MUJS)/build/release/

apclean:
	$(MAKE) -C $(ALPNG) -f Makefile.zlib clean

mbedtlsclean:
	$(MAKE) -C $(MBEDTLS) -f Makefile clean
	$(FINDPRG) $(MBEDTLS) -name \*.d -exec rm {} +

curlclean:
	$(MAKE) $(MPARA) -C $(CURL)/lib -f Makefile.mk CFG=-zlib-mbedtls TRIPLET=$(CROSS) clean
	$(RMPRG) -f $(CURL)/lib/libcurl.a

clean:
	rm -rf $(BUILDDIR)/
	rm -f $(EXE) $(ZIP) JSLOG.TXT JSBOOT.ZIP cacert.pem

fixnewlines:
	$(FINDPRG) . -iname *.sh -exec dos2unix -v \{\} \;

node_install:
	$(NPM_INSTALL) jsdoc
	$(NPM_INSTALL) better-docs
	$(NPM_INSTALL) @babel/core @babel/cli
	$(NPM_INSTALL) @babel/preset-env
	$(NPM_INSTALL) @babel/plugin-transform-exponentiation-operator

.PHONY: clean distclean init

DEPS := $(wildcard $(BUILDDIR)/*.d)
ifneq ($(DEPS),)
include $(DEPS)
endif
